https://www.youtube.com/watch?v=pnhO8UaCgxg

COMPONENTS - root component : App.js 
dvs den första komponenten som renderas till DOM. Resterande komponenter är nested i den här komponenten:
image.png
image.png
react jobbar med komponenter - en stycke kod är en komponent tex

Bra att veta:
I äldre versioner av React behöver man import React from 'react'

I React så jobbar vi i App.js
I App.js så heter mjukvaran JSX, en variant av JS, syntaxen är annorlunda. JSX gör att vi skapar HTML-styled komponenter, och det renderar HTML.

Nedan: App() istället för app()
className istället för class -> blir konverterat till class i HTML sedan

function App() { return ( HÄR ÄR ALLTSÅ HTML-KOD! FAST MED JSX-SPRÅK)
Tex: {logo} i img src, och <code></code> i en paragraf.
{logo} anropas såhär: import logo from './logo.svg';
}

{} <-- Dynamiskt value
tex: const title = "Welcome to the new blog";
{title} ="Welcome to the new blog"

JSX omvandlar nummer, strings och arrayer till en string - funkar dock inte för booleas och objekt.
const likes = 50; <- funkar 
const person = {name: Test, age: 30}; <- funkar inte

function App() {
  return (
    <div className="App"> <--notera camelSccript
    <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>


På slutet står det alltid såhär: 
export default App;

kolla tex i index.js, där vi import App from "app"
import App from './App';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


Viktigt att exportera komponent så vi kan använda det någon annanstans också.


Dynamiska:
   <h1>{title}</h1>
      <p> Liked {likes} times</p>
      <p>{"Hello, world"}</p>
      <p>{10}</p>
      <p>{[1,2,3,4]}</p>
      <p>{Math.random()*10}</p> <- den här gör en funktion! :D

      <a href= {link}>Länk </a>


sfc + tab = bra 


      const Navbar = () => {
  return (  
    <nav className="navbar">
      <h1>STG SPELAR SPEL</h1>
      <div className="links">
        <a href="/">Start</a>
        <a href="/create">Ny blogg</a>
      </div>
    </nav>
  );
}
 
export default Navbar;


I App.js:
import './App.css'; 
import Navbar from "./Navbar";
import Home from "./Home";

function App() {
 

  return (
    <div className="App">
      <Navbar />  <--- VIKTIGT : AVSLUTA
     <div classname="content">
    <Home />
     </div>
    </div>
  );
}

export default App;



CSS: 
App.css är linkad till App.js, kommer ge styling till allt. Scopar inte! 
Man kan använda CSS komponents, eller använda olika CSS-filer för olika mindra projekt.

index.css är globalt - importeras till index.js, och är den första <style>taggen i HTML
Vi tar därför bort App.css


style={{}} 
det andra paret curly braces indikerar ett objekt!


 <button onClick={handleClick}>Click me! Click meeee!</button>
 går ej att passera argument som nedan: 

 <button onClick={handleClick(yoshi)}

 utan såhär:
 

  const handleClickAgain = (name) => 
  {
    console.log("HELLO " + name)
  }

  return ( 
   
    <button onClick={()=> {
      handleClickAgain("Tova")
    }}>
    Click me again</button>
   </div>


     const handleClick = (e) => {
    console.log("Yaaay you clicked", e)
  }

  e = event object i console


  useState hook = gör att tex let name = "mario" kan ändras
  (se Home.js)

  const [name, setName] = useState("Tova");
   const handleClick = (e) => {
   
    setName("Oskar")
  }
  <- ovan re:renderar komponenten - där komponenten name har blivit uppdaterat från Tova till Oskar

  image.png
  image.png

  bra att veta om: react developer tools - kolla på components, kolla på tex hooks och se hur det ändras


  key={} <- viktigt för att kunna iterate blogs, key är unikt

  I förra lektionen så renderade vi ut blogs i Home
  I denna lektion så gör vi renderingen - bloglist - som en komponent som vi kan återanvända på olika sidor! 

  Vi använder oss av PROPS, där vi passerar data från en komponent till en childcomponent


  const BlogList = (props) => {
  const blogs = props.blogs;
  const title= props.title;
  console.log(props, blogs, title)

  GÅR OCKSÅ ATT SKRIVA:
   const BlogList = ({blogs, title}) => {




Filtrerar altl som inte tas bort:
const handleDelete = (id) => {
    const newBlogs = blogs.filter(blog => blog.id !== id); 
    setBlogs(newBlogs);
  }


useEffect(() => {
    console.log("useEffect runs")
  });
  används varje gång vi renderar
  useEffect används alltså bara när vi renderar om - alltså när något ändrat tex

    useEffect(() => {
    //useState - rerender osv.
    console.log("useEffect runs");
    console.log(blogs);
  }, []);
  [] <- gör att det bara används första gången man renderar hemsidan


  läsa in JSON:
  ny terminal:
  npx json-server --watch data/db.json --port 8000

  
  Resources
  http://localhost:8000/blogs
  <-- detta kan vi nu använda fetch på!

  Home
  http://localhost:8000


  https://www.youtube.com/watch?v=qdCHEUaFhBk
  om fetch och .then osv 


ERROR: blogs = null går ej att mappa --->
const [blogs, setBlogs] = useState(null);
  {blogs && <BlogList blogs={blogs} 

  om blogs = false (null är false) så går den in på nästa funktion (BlogList)



Bra att veta om React:
HTML-filen är tom - React renderar ut på den.
Så när vi använder oss av React router så renderar vi ut nytt.
= mindre tunga filer?

image.png

INSTALLERA REACT ROUTER:
npm install react-router-dom
 npm install react-router-dom@5

 i package:   "react-router-dom": "^5.3.3",


 import {BrowserRouter as Router, Route, Switch} from "react-router-dom";

function App() {
 

  return (
    <Router>
    <div className="App">
      <Navbar />
    <div className="content">
      <Switch>
        <Route path="/">
          <Home />
        </Route>
      </Switch>
    </div>
    </div>
    </Router>

    
  return (
    <Router>
    <div className="App">
      <Navbar />
    <div className="content">
      <Switch>
        <Route path="/">
          <Home />
        </Route>
        <Route path="/create">
          <Home />
        </Route>
      </Switch>
    </div>
    </div>
    </Router>


BLIR PROBLEM:
"/" ingår ju i "/create", så /create leder då till Home.
Vi behöver då definiera mer: exact path
      <Route path="/">
          <Home />
        </Route>
        <Route path="/create">
          <Create />
        </Route>


SWITCH - går från toppen till botten och letar.
Gör en request till servern. 


LINK blir a href i HTML


När vi försöker göra en fetch men byter hemsida fort så blir det lite fel (Cant perfrom a react state update)